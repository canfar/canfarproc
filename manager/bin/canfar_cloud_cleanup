#!/bin/bash

EXEC_NAME=$(basename $0 .${0##*.})
EXEC_VERSION=0.3.1

msg() {
    echo -e " >> ${EXEC_NAME}: $1"
}

warn() {
    echo -e " ## WARNING ${EXEC_NAME}: $1"
}

die() {
    echo -e " !! ERROR ${EXEC_NAME}: $1" 1>&2
    exit 1
}

usage() {
    echo $"Usage: ${EXEC_NAME} [cloud]
Cleanup HTCondor with OpenStack cloud
"
    exit
}

cloud=$1

source /mnt/stats/openstack/projects/${cloud/cc-}/CANFAR-openrc.sh

export PATH="/usr/local/bin:${PATH}"

log_file="/var/log/cloudcleanup.log"

# loop on VM instance names found on nova
for vm_nova_name in $(openstack server list -f value -c Name 2> /dev/null | grep ${cloud}); do
    
    # check if cloud scheduler is tracking the VM
    vm_cs_name=$(cloud_status -m | grep ${vm_nova_name} | awk '{print $2}')
    [[ -n "${vm_cs_name}" ]] && continue

    msg "cloud_scheduler lost ${vm_nova_name}"
    vm_to_delete="${vm_to_delete} ${vm_nova_name}"

    # if vm is still running condor, shutdown daemons peacefully first
    vm_worker=$(condor_status -l -attributes Name | awk '{print $3}' | sed -e 's/"//g' | grep ${vm_nova_name})
    [[ -z "${vm_worker}" ]] && continue

    condor_off -peaceful -name ${vm_worker} -startd
    # get startd and master IPs
    addr=$(condor_status ${vm_worker} -l | grep MyAddress | head -n1 | sed  -e 's/"//g')
    if  [ -n "${addr}" ]; then 
	msg "shutdown startd daemon ${startd_addr} on ${vm_nova_name}"
	condor_off -peaceful -addr ${addr} -startd
    fi
    addr=$(condor_status ${vm_worker} -l -master | grep MasterIpAddr | sed -e 's/"//g')
    if  [[ -n "${addr}" ]]; then 
	msg "shutdown master daemon ${addr} on ${vm_nova_name}"
	condor_off -peaceful -addr ${addr} -master
    fi
done

# terminate all instances found on nova but not on cloud scheduler
if [ -n "${vm_to_delete}" ]; then
    msg "deleting the $(echo ${vm_to_delete} | wc -w) instances lost from cloud scheduler"
    openstack server delete ${vm_to_delete}
fi

# work around cloud scheduler threaded clean-up dead-lock
bad_vms="$(cloud_status -m | grep Retiring | awk '{print $1}')"
if [[ -n "${bad_vms}" ]]; then
    for vm_cs_id in ${bad_vms}; do
	msg "killing VM ID ${vm_cs_id} in Retiring state"
	cloud_admin -k -n ${vm_cs_id} -c ${cloud}
    done
fi

# work around condor getting lost but VM still up
#vm_workers="$(condor_q -run -nobatch | awk '{print $6}' | grep ${VM_PREFIX} | sed -e 's/^slot1@//')"
#cmd=""
#for vm_worker in ${vm_workers}; do
#    cmd="${cmd} | grep -v ${vm_worker}"
#done
#bad_vms="$(cloud_status -m ${cmd} | grep -v Total | grep -v ID | awk '{print $1}')"
#for vm_cs in ${bad_vms}; do
#    echo "Terminating VM ${vm_cs} in HTCondor stalled state"
#    cloud_admin -k -n ${vm_cs} -c ${CLOUD_NAME}
#done

for vm_nova_name in $(openstack server list --status ERROR -f value -c Name 2> /dev/null); do
    msg "deleting VM instance ${vm_nova_name} in ERROR state"
    vm_cs_name=$(cloud_status -m | grep ${vm_nova_name} | awk '{print $1}')
    if [[ -n "${vm_cs_name}" ]]; then
	cloud_admin -k -n ${vm_cs_name} -c ${cloud}
    else
	openstack server delete ${vm_nova_name} 2> /dev/null
    fi
done

sudo cloud_admin -e ${cloud}
condor_release -a
