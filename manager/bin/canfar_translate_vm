#!/usr/bin/env python
#
# A tool to share VMs between canfar projects
#
# Inputs:
#   - username, password for authorization
#   - VM image (name or UUID) and project (name)
#
# The client will authenticate to OpenStack in order to:
#   - share the user VM with the batch processing project
#   - translate image, project to UUID as needed
#   - will output VM and flavour IDs.

import argparse

import keystoneclient.exceptions
import keystoneauth1.session as kssession
import keystoneauth1.identity.v3 as ksv3

import novaclient.client as nclient

import glanceclient.client as glclient
from glanceclient.exc import HTTPConflict

import os
import re
import requests
from requests.auth import HTTPBasicAuth
import sys
import uuid
import logging
#logging.basicConfig()
logging.disable(logging.CRITICAL)

# ID of the batch project we need to share with                                 
_BATCH_PROJECT_ID = '2197b17dc49943b096502ab2b7b3d88b'

image_id = None

# --- ENTRYPOINT --------------------------------------------------------------

try:
    # Parse command line
    description = "Share a VM between projects"
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('image', help='VM image for job (name or ID)')
    parser.add_argument('flavor', help='VM flavor (name or ID)')    
    parser.add_argument('-v','--verbose', default=False, help='verbose output', action='store_true')

    args = parser.parse_args()

    image = args.image
    flavor = args.flavor

    auth = ksv3.Password(auth_url=os.environ['OS_AUTH_URL'],
                         username=os.environ['OS_USERNAME'],
                         password=os.environ['OS_PASSWORD'],
                         project_id=os.environ['OS_PROJECT_ID'],
                         user_domain_name=os.environ['OS_USER_DOMAIN_NAME'])
    
    sess = kssession.Session(auth=auth)

    g = glclient.Client('2', session=sess)
    n = nclient.Client('2.1', session=sess)

    # need an image ID. If the user supplied a name, convert it to ID.
    try:
        # user provided image_id
        image_id = str(uuid.UUID(image))
        image_name = None
    except:
        # user provided image_name
        image_id = None
        image_name = image

    if not image_id:
        matches = []
        
        for i in g.images.list():
            if image_name == i['name']:
                matches.append(i['id'])

        if len(matches) == 0:
            raise Exception("Couldn't find image named '%s'" % image_name)
        elif len(matches) > 1:
            errstr="Multiple image IDs in project '%s' match image name '%s':\n%s" % (auth.project_id, image_name, '\n'.join(matches))
            raise Exception(errstr)
        else:
            # unique image_id
            image_id = matches[0]

    # Share the image with batch project

    try:
        im = g.images.get(image_id)
        if im['visibility'] != 'public':
            if args.verbose:
                print("sharing image id %s with batch project" % image_id)
            g.images.update(image_id, visibility="shared")
            g.image_members.create(image_id,_BATCH_PROJECT_ID)
        else:
            if args.verbose:
                print("image id %s is already public" % image_id)

    except HTTPConflict as E:
        if E.code == 409:
            if args.verbose:
                print("image id %s is already shared" % image_id)
            pass
        else:
            raise E

    # We will require a flavor ID. If the user supplied a name, convert
    # it to ID.
    try:
        # user provided flavor_id
        flavor_id = str(uuid.UUID(flavor))
        flavor_name = None
    except:
        # user provided image_name
        flavor_id = None
        flavor_name = flavor

    if not flavor_id:
        flavors = n.flavors.list()
        for f in flavors:
            if flavor_name == f.name:
                flavor_id = f.id
        if not flavor_id:
            flavor_names = [f.name for f in flavors]
            msg = "Supplied flavour '%s' is not valid. Available flavours:\n"\
                  % flavor
            msg = msg + ' \n'.join(flavor_names)
            raise Exception(msg)

    print "%s %s" % (image_id, flavor_id)

except Exception as E:
    print 'ERROR: ', E
    if isinstance(E, keystoneclient.exceptions.Unauthorized):
        print('Did you source your OpenStack openrc file?')
    sys.exit(1)

sys.exit(0)
