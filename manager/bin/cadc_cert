#!/bin/bash
#
# Shell script to get a proxy cert really hard
#

EXEC_NAME=$(basename $0 .${0##*.})
EXEC_VERSION=0.2.1

# Default path for CADC user X509 proxy cert
CADC_CERT_DEFAULT_PATH="${HOME}/.ssl/cadcproxy.pem"

# min validation in days the cert has to be
CADC_CERT_MIN_VALID=5

# max validation in days the cert will be
CADC_CERT_MAX_VALID=15

# cadc url to check a valid cert
CADC_URL="www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca"

# the CADC user for the proxy cert if needed
CADC_USER="${USER}"

msg() {
    echo -e " >> ${EXEC_NAME}: $1"
}

die() {
    echo -e " !! ERROR ${EXEC_NAME}: $1" 1>&2
    exit 1
}

usage() {
    echo $"Usage: ${EXEC_NAME} [OPTION]
Try to generate a new proxy cert with minimum validity for processing

  -u, --user=<user>         CADC username to use to fetch the cert for (default: ${CADC_USER})
  -v, --verbose             verbose for debugging
  -h, --help                display help and exit
  -V, --version             output version information and exit

"
    exit
}

# Fetch a proxy cert valid for $1 days, by:
# 1. using a .netrc file
# 2. asking password
cadc_get_cert() {
    local days=$1
    if grep -q ${CADC_URL}.*${CADC_USER} ${HOME}/.netrc 2> /dev/null; then
	[[ -n ${VERBOSE} ]] && msg "fetching a cert for ${CADC_USER} using ${HOME}/.netrc"
	cadc-get-cert --quiet --days-valid=${days} -n > /dev/null && return 0
    fi
    if [[ -n ${CADC_USER} ]] ; then
	[[ -n ${VERBOSE} ]] && msg "prompting user for CADC password"
	msg "Enter password for CADC user ${CADC_USER}"
	cadc-get-cert --quiet --days-valid=${days} --user=${CADC_USER} && return 0
    fi
    [[ -n ${VERBOSE} ]] && msg "could not get any valid credentials"
    return 1
}

# Check a proxy cert for minimum days of validity for processing
cadc_check_cert() {
    local cert=$1
    local last_day_valid="$(openssl x509 -in ${cert} -enddate -noout | sed -e 's/notAfter=//')"
    local days_left=$(( ( $(date --date="${last_day_valid}" +%s) - $(date --date="${today}" +%s) ) / 86400 ))
    
    if [[ -n ${VERBOSE} ]] ; then
	if [[ ${days_left} -lt ${CADC_CERT_MIN_VALID} ]]; then
	    msg "left with ${days_left} days"
	    msg "renewing certificate for ${CADC_CERT_MAX_VALID} days"
	else
	    msg "CADC proxy certificate is still valid for ${days_left} days, renewing anyway"
	fi
    fi
    cadc_get_cert ${CADC_CERT_MAX_VALID}
}

# Store all options
OPTS=$(getopt \
    -o u:hvV \
    -l user: \
    -l help \
    -l verbose \
    -l version \
    -- "$@")

eval set -- "${OPTS}"

# Process options
VERBOSE=
while true; do
    case "$1" in
	-u | --user) CADC_USER=${2##=}; shift ;;
	-h | --help) usage ;;
	-v | --verbose) VERBOSE=true ;;
	-V | --version) echo ${EXEC_VERSION}; exit ;;
	--)  shift; break ;; # no more options
	*) break ;; # parameters
    esac
    shift
done

valid=no

if [[ -e ${PWD}/cadcproxy.pem ]] && [[ ${valid} == no ]]; then
    [[ -n ${VERBOSE} ]] && msg "checking cert ${PWD}/cadcproxy.pem"
    cadc_check_cert ${PWD}/cadcproxy.pem && valid=yes && CADC_CERT_PATH=${PWD}/cadcproxy.pem
elif [[ ${valid} == no ]]; then
    [[ -n ${VERBOSE} ]] && msg "did not find existing cert at ${PWD}/cadcproxy.pem "
fi

if [[ -e ${CADC_CERT_DEFAULT_PATH} ]] && [[ ${valid} == no ]]; then
    [[ -n ${VERBOSE} ]] && msg "checking cert ${CADC_CERT_DEFAULT_PATH}"
    cadc_check_cert ${CADC_CERT_DEFAULT_PATH} && valid=yes
elif [[ ${valid} == no ]]; then
    [[ -n ${VERBOSE} ]] && msg "did not find existing default cert at ${CADC_CERT_DEFAULT_PATH}"
    cadc_get_cert ${CADC_CERT_MAX_VALID} && valid=yes
fi

[[ ${valid} == no ]] && die "could not get a CADC cert for user ${CADC_USER}"

# hack to copy to default location for vos
if [[ -e ${CADC_CERT_PATH} ]]; then
    mkdir -p $(dirname ${CADC_CERT_DEFAULT_PATH})
    cp ${CADC_CERT_PATH} ${CADC_CERT_DEFAULT_PATH}
fi
