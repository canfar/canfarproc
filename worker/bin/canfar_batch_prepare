#!/bin/bash

# Shell script to prepare a VM for batch at interactive time
# avoid ruby/python bloat (puppet/chef/ansible) and replace with bash bloat :)

EXEC_NAME=$(basename $0 .${0##*.})
EXEC_VERSION=0.1.9

CONDOR_MIN_VERSION=8.8

msg() {
    echo -e " >> ${EXEC_NAME}: $1"
}

die() {
    echo -e " >> ${EXEC_NAME} ERROR: $1" 1>&2
    exit 1
}

usage() {
    echo $"Usage: ${EXEC_NAME}
Prepare a VM for batch on CANFAR.
1. Install condor if VM is either RPM or DEB based
2. Disable SELinux
3. Add network stuff for canfar
"
    exit
}

canfar_install_condor_rpm() {
    msg "rpm/yum based distribution detected"
    local rh_vers=$(rpm -qa \*-release | grep -Ei "^(redhat|centos|sl)" | cut -d "-" -f3)
    if [[ -n ${rh_vers} ]]; then
	msg "distribution version ${rh_vers} detected, adding condor yum repo"
	rpm --import https://research.cs.wisc.edu/htcondor/yum/RPM-GPG-KEY-HTCondor || die "failed to import HTCondor GPG key"
	curl -sL https://research.cs.wisc.edu/htcondor/yum/repo.d/htcondor-stable-rhel${rh_vers}.repo \
	     -o /etc/yum.repos.d/htcondor-stable-rhel${rh_vers}.repo
	yum update -y
    else
	msg "non-RHEL distribution, assuming condor is already available from current repos"
    fi
    msg "installing condor..."
    yum -y install condor || die "failed to install condor"
    # on CentOS 7 /var/lock/condor is incorrectly owned by root
    if condor_version | grep -q RedHat_7; then
        msg "RedHat 7 derivatives need hack for /var/lock/condor ownership."
        mkdir -p /var/lock/condor
        chown condor:condor /var/lock/condor
    fi
}

canfar_install_condor_deb() {
    msg "apt/dpkg distribution detected assume debian wheezy"
    export DEBIAN_FRONTEND=noninteractive
    local condordeb="deb http://research.cs.wisc.edu/htcondor/debian/stable/ wheezy contrib"
    if [[ -d /etc/apt/sources.list.d ]]; then
	echo "${condordeb}" > /etc/apt/sources.list.d/condor.list
    else
	echo "${condordeb}" >> /etc/apt/sources.list
    fi
    wget -qO - http://research.cs.wisc.edu/htcondor/debian/HTCondor-Release.gpg.key | apt-key add - > /dev/null
    apt-get -q update -y  2> /dev/null || apt update -q -y 2>/dev/null
    msg "installing condor..."
    # htcondor is the name of the package in debian repo, condor is the name in the condor repo
    apt-get -q install -y condor || apt install -q -y condor || die "condor didn't install properly"
}

canfar_install_condor_ubuntu() {
    local ubuntu_version=$(lsb_release -sc)
    msg "detected ubuntu ${ubuntu_version}"
    local condor_version=${CONDOR_MIN_VERSION}
    export DEBIAN_FRONTEND=noninteractive
    local condordeb="deb http://research.cs.wisc.edu/htcondor/ubuntu/${condor_version}/${ubuntu_version} ${ubuntu_version} contrib"
    if [[ -d /etc/apt/sources.list.d ]]; then
	echo "${condordeb}" > /etc/apt/sources.list.d/condor.list
    else
	echo "${condordeb}" >> /etc/apt/sources.list
    fi
    wget -qO - https://research.cs.wisc.edu/htcondor/ubuntu/HTCondor-Release.gpg.key | apt-key add - > /dev/null
    apt-get update -q -y  2> /dev/null || apt update -q -y 2>/dev/null
    msg "installing condor..."
    # htcondor is the name of the package in debian repo, condor is the name in the upstream condor repo
    apt-get install -q -y condor || apt install -q -y condor || die "condor didn't install properly"
}

# install condor for rpm or deb distros
canfar_install_condor() {
    local cv=$(condor_version 2> /dev/null | awk '/BuildID/ {print $2}')
    if [[ -n ${cv} ]] && [[ ${CONDOR_MIN_VERSION} = $(echo -e "${CONDOR_MIN_VERSION}\n${cv}" | sort -V | head -n1) ]] ; then
	msg "condor ${CONDOR_MIN_VERSION} is already installed"
	return 0
    fi
    [[ ${EUID} -ne 0 ]] && die "you must run this script as root or with sudo"
    msg "installing/updating condor"
    # determine os
    if yum --version > /dev/null 2>&1 ; then
	canfar_install_condor_rpm
    elif [[ $(lsb_release -si) == Ubuntu ]] ; then
	canfar_install_condor_ubuntu
    elif apt-get --version > /dev/null 2>&1 || apt --version > /dev/null 2>&1; then
	canfar_install_condor_deb
    else
	die "unable to detect distribution type, you must install HTCondor yourself"
    fi
}

canfar_disable_selinux() {
    # selinux not friendly with condor in our configuration
    # it is enabled on RHEL images by default
    if getenforce > /dev/null 2>&1 && [[ $(getenforce) != Disabled ]]; then
	msg "disabling SELinux"
	[[ -e /etc/selinux/config ]] && \
	    sed -i -e 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
	setenforce 0
    fi
}

canfar_setup_network() {
    msg "tuning network parameters for batch processing"
    # tuned tcp stack for better networking experience with condor and VMs    
    mkdir -p  /etc/sysctl.d
    cat > /etc/sysctl.d/20-canfar-batch.conf <<EOF
kernel.numa_balancing = 0
net.core.somaxconn = 1000
net.core.netdev_max_backlog = 5000
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.neigh.default.gc_thresh1 = 2048
net.ipv4.neigh.default.gc_thresh2 = 3072
net.ipv4.neigh.default.gc_thresh3 = 4096
net.ipv4.tcp_keepalive_time=200
net.ipv4.tcp_keepalive_intvl=200
net.ipv4.tcp_keepalive_probes=5
net.ipv4.tcp_wmem = 4096 12582912 16777216
net.ipv4.tcp_rmem = 4096 12582912 16777216
net.ipv4.tcp_max_syn_backlog = 8096
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_tw_reuse = 1
vm.dirty_ratio = 80
vm.dirty_background_ratio = 5
vm.dirty_expire_centisecs = 12000
vm.swappiness = 0
EOF

    sysctl --system -q
}


# Store all options
OPTS=$(getopt \
    -o hv \
    -l help \
    -l version \
    -- "$@")

eval set -- "${OPTS}"

# Process options
while true; do
    case "$1" in
	-h | --help) usage ;;
	-V | --version) echo ${EXEC_VERSION}; exit ;;
	--)  shift; break ;; # no more options
	*) break ;; # parameters
    esac
    shift
done

canfar_install_condor
canfar_disable_selinux
canfar_setup_network
